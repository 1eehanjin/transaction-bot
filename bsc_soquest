import json
import pprint
import time
import decimal
from web3 import Web3

from eth_account import Account
from eth_account.signers.local import LocalAccount
from web3.middleware import construct_sign_and_send_raw_middleware

    
def send_transaction(account):
    transaction = {
        'chainId': 137,
        'from': account.address,
        'to': '0x7B36dFD5304562952E2B4DE9C8048ED155c6115d',
        'value': 0,
        'nonce': w3.eth.get_transaction_count(account.address),
        'data': '0x98cf9d5100000000000000000000000000000000000000000000000106505e1a19c0dff8',
        'gas': gas,
        'maxFeePerGas': Web3.to_wei(max_gwei, 'gwei'), #
        'maxPriorityFeePerGas': Web3.to_wei(max_priority_gwei, 'gwei'), #
    }      
    signed = w3.eth.account.sign_transaction(transaction, eth_private_key )
    tx_hash = w3.eth.send_raw_transaction(signed.rawTransaction)
    tx_hash_string = tx_hash.hex()
    print( tx_hash_string)

    gas = 2000000
max_gwei = '201'
max_priority_gwei = '40'
amountInWei = 19996020692399520915

w3 = Web3(Web3.HTTPProvider("https://bsc-dataseed.binance.org/"))
with open('./secrets.json') as f:
            secret_data = json.load(f)
            bsc_private_keys = secret_data["bsc_private_keys"]

accounts = []
for bsc_private_key in bsc_private_keys:
    account = Account.from_key(bsc_private_key)
    accounts.append(account)     
    print(f"Your wallet address is {account.address}")
    print(w3.eth.get_balance(account.address))

send_transaction(account)